// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MillionLuxury.Infrastructure.Database;

#nullable disable

namespace MillionLuxury.Infrastructure.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250901001730_CreatePropertiesSchema")]
    partial class CreatePropertiesSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MillionLuxury.Domain.Properties.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("address");

                    b.Property<decimal>("AreaInSquareMeters")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("area_in_square_meters");

                    b.Property<int>("Bathrooms")
                        .HasColumnType("int")
                        .HasColumnName("bathrooms");

                    b.Property<int>("Bedrooms")
                        .HasColumnType("int")
                        .HasColumnName("bedrooms");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("description");

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("internal_code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("owner_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<int>("PropertyType")
                        .HasColumnType("int")
                        .HasColumnName("property_type");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("pk_properties");

                    b.HasIndex("AreaInSquareMeters")
                        .HasDatabaseName("ix_properties_area_in_square_meters");

                    b.HasIndex("Bathrooms")
                        .HasDatabaseName("ix_properties_bathrooms");

                    b.HasIndex("Bedrooms")
                        .HasDatabaseName("ix_properties_bedrooms");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_properties_created_at");

                    b.HasIndex("InternalCode")
                        .IsUnique()
                        .HasDatabaseName("ix_properties_internal_code");

                    b.HasIndex("Price")
                        .HasDatabaseName("ix_properties_price");

                    b.HasIndex("PropertyType")
                        .HasDatabaseName("ix_properties_property_type");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_properties_status");

                    b.ToTable("Properties", (string)null);
                });

            modelBuilder.Entity("MillionLuxury.Domain.Properties.PropertyImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("file_name");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("file_path");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("is_enabled");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("property_id");

                    b.HasKey("Id")
                        .HasName("pk_property_images");

                    b.HasIndex("IsEnabled")
                        .HasDatabaseName("ix_property_images_is_enabled");

                    b.HasIndex("PropertyId")
                        .HasDatabaseName("ix_property_images_property_id");

                    b.ToTable("PropertyImages", (string)null);
                });

            modelBuilder.Entity("MillionLuxury.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("email");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit")
                        .HasColumnName("is_email_verified");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("roles");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("MillionLuxury.Domain.Properties.PropertyImage", b =>
                {
                    b.HasOne("MillionLuxury.Domain.Properties.Property", null)
                        .WithMany("Images")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_property_images_property_property_id");
                });

            modelBuilder.Entity("MillionLuxury.Domain.Properties.Property", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
